{"version":3,"sources":["firebase.ts","constants/index.tsx","helpers/index.tsx","context/projectContext.tsx","hooks/index.tsx","context/selectedProjectContext.tsx","context/addTaskContext.tsx","components/ProjectOverlay.tsx","components/TaskDate.tsx","components/AddTask.tsx","components/layout/Header.tsx","components/IndividualProject.tsx","components/Projects.tsx","components/AddProject.tsx","components/layout/Sidebar.tsx","components/Checkbox.tsx","components/Tasks.tsx","components/layout/Content.tsx","App.tsx","index.tsx"],"names":["firebaseConfig","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","collatedTasks","key","name","collatedTasksExist","selectedProject","find","task","generatePushId","PUSH_CHARS","lastRandChars","now","Date","getTime","timeStampChars","Array","i","charAt","Math","floor","id","join","ProjectsContext","React","createContext","projects","setProjects","ProjectsProvider","children","useState","useEffect","firestore","collection","where","orderBy","get","then","snapshot","allProjects","docs","map","project","data","docId","JSON","stringify","catch","err","console","log","useProjects","Provider","value","useProjectsValue","useContext","SelectedProjectContext","setSelectedProject","SelectedProjectProvider","useSelectedProjectValue","AddTaskContext","shouldShowMain","showQuickAddTask","setShowQuickAddTask","setShouldShowMain","AddTaskProvider","useAddTaskValue","ProjectOverlay","setProject","showProjectOverlay","setShowProjectOverlay","className","data-testid","onClick","onKeyDown","tabIndex","role","aria-label","TaskDate","showTaskDate","setShowTaskDate","setTaskDate","moment","format","add","AddTask","showAddTaskMain","setTask","taskDate","showMain","setShowMain","addTask","a","collatedDate","archived","date","userId","fontSize","type","onChange","e","target","Header","darkMode","setDarkMode","src","process","alt","IndividualProject","showConfirm","setShowConfirm","deleteProject","doc","delete","Projects","activeValue","active","setActive","data-doc-id","AddProject","shouldShow","show","setShow","projectName","setProjectName","addProject","placeholder","Sidebar","showProjects","setShowProjects","undefined","Checkbox","taskDesc","archivedTask","update","Tasks","tasks","setTasks","archivedTasks","setArchivedTasks","unsubscribe","onSnapshot","newTasks","filter","diff","useTasks","getCollatedTitle","length","getTitle","document","title","Content","App","darkModeDefault","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.62dd35c6.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport 'firebase/firestore'\n\nconst firebaseConfig = firebase.initializeApp({\n  apiKey: \"AIzaSyAMkgS8gakKHkUjW1b2W_gWyomqV7jtke4\",\n  authDomain: \"todoist-dad7e.firebaseapp.com\",\n  projectId: \"todoist-dad7e\",\n  storageBucket: \"todoist-dad7e.appspot.com\",\n  messagingSenderId: \"802114518305\",\n  appId: \"1:802114518305:web:a63ad44b10ca2c13265260\",\n});\n\nexport { firebaseConfig as firebase };","import { Title } from '../types'\n\n\nexport const collatedTasks: Title[] = [\n    {key: 'INBOX', name: 'Inbox'},\n    {key: 'TODAY', name: 'Today'},\n    {key: 'NEXT_7', name: 'Next 7 days'},\n]\n","import { collatedTasks } from \"../constants\";\nimport { Project, Title } from \"../types\";\n\n// const ensure = <T,>(argument: T | undefined | null, message: string = 'This value was promised to be there.'): T => {\n//   if (argument === undefined || argument === null) {\n//     throw new TypeError(message);\n//   }\n\n//   return argument;\n// }\n\nexport const getTitle = (projects: Project[], projectId: string) => {\n  return projects.find((project) => project.projectId === projectId)\n};\n\nexport const getCollatedTitle = (tasks: Title[], key: string) => {\n  return tasks.find((task) => task.key === key)\n};\n\nexport const collatedTasksExist = (selectedProject: string) =>\n  collatedTasks.find((task) => task.key === selectedProject);\n\nexport const generatePushId = (() => {\n  const PUSH_CHARS =\n    \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\";\n\n  const lastRandChars: [] = [];\n\n  return function () {\n    let now = new Date().getTime();\n\n    const timeStampChars = new Array(8);\n    for (var i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      now = Math.floor(now / 64);\n    }\n\n    let id = timeStampChars.join(\"\");\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    return id;\n  };\n})();\n","import React, { useContext } from \"react\";\nimport { useProjects } from \"../hooks\";\nimport { Project } from \"../types\";\n\ninterface ProjectsContextType {\n  projects: Project[];\n  setProjects: React.Dispatch<React.SetStateAction<Project[]>>;\n}\n\nexport const ProjectsContext = React.createContext<ProjectsContextType>({\n  projects: [],\n  setProjects: () => [],\n});\n\nexport const ProjectsProvider: React.FC<React.ReactNode> = ({ children }) => {\n  const { projects, setProjects } = useProjects();\n\n  return (\n    <ProjectsContext.Provider value={{ projects, setProjects }}>\n      {children}\n    </ProjectsContext.Provider>\n  );\n};\n\nexport const useProjectsValue = () => useContext(ProjectsContext);\n","import { useState, useEffect } from \"react\";\nimport { firebase } from \"../firebase\";\nimport { collatedTasksExist } from \"../helpers\";\nimport moment from \"moment\";\nimport { Query } from \"@firebase/firestore-types\";\nimport { Task, Func, Project } from \"../types\";\n\nexport const useTasks = (selectedProject: string) => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [archivedTasks, setArchivedTasks] = useState<Task[]>([]);\n\n  useEffect((): Func => {\n    let unsubscribe: Query | Func = firebase\n      .firestore()\n      .collection(\"tasks\")\n      .where(\"userId\", \"==\", \"tarrak123\");\n\n    unsubscribe =\n      selectedProject && !collatedTasksExist(selectedProject)\n        ? (unsubscribe = unsubscribe.where(\"projectId\", \"==\", selectedProject))\n        : selectedProject === \"TODAY\"\n        ? (unsubscribe = unsubscribe.where(\n            \"date\",\n            \"==\",\n            moment().format(\"DD/MM/YYYY\")\n          ))\n        : selectedProject === \"INBOX\" || selectedProject === null\n        ? (unsubscribe = unsubscribe.where(\"date\", \"==\", \"\"))\n        : unsubscribe;\n\n    unsubscribe = unsubscribe.onSnapshot((snapshot) => {\n      const newTasks: Task[] = snapshot.docs.map((task) => ({\n        id: task.id,\n        task: task.get(\"task\"),\n        ...task.data(),\n      }));\n\n      setTasks(\n        selectedProject === \"NEXT_7\"\n          ? newTasks.filter(\n              (task) =>\n                moment(task.date, \"DD/MM/YYYY\").diff(moment(), \"days\") <= 7 &&\n                task.archived !== true\n            )\n          : newTasks.filter((task) => task.archived !== true)\n      );\n      setArchivedTasks(newTasks.filter((task) => task.archived !== false));\n    });\n\n    return () => unsubscribe;\n  }, [selectedProject]);\n\n  return { tasks, archivedTasks };\n};\n\nexport const useProjects = (): {\n  projects: Project[];\n  setProjects: React.Dispatch<React.SetStateAction<Project[]>>;\n} => {\n  const [projects, setProjects] = useState<Project[]>([]);\n\n  useEffect(() => {\n\n      firebase\n        .firestore()\n        .collection(\"projects\")\n        .where(\"userId\", \"==\", \"tarrak123\")\n        .orderBy(\"projectId\")\n        .get()\n        .then((snapshot) => {\n          const allProjects = snapshot.docs.map((project) => ({\n            ...project.data(),\n            docId: project.id,\n            projectId: project.get(\"projectId\"),\n          }));\n  \n          if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n            setProjects(allProjects);\n          }\n        })\n        .catch(err => console.log(err));\n\n  }, [projects]);\n\n  return { projects, setProjects };\n};\n","import React, { useState, useContext } from \"react\";\n\nexport interface SelectedProjectType {\n  selectedProject: string;\n  setSelectedProject: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const SelectedProjectContext = React.createContext<SelectedProjectType>({\n  selectedProject: \"INBOX\",\n  setSelectedProject: () => \"\",\n});\n\nexport const SelectedProjectProvider: React.FC<React.ReactNode> = ({\n  children,\n}) => {\n  const [selectedProject, setSelectedProject] = useState(\"INBOX\");\n\n  return (\n    <SelectedProjectContext.Provider\n      value={{ selectedProject, setSelectedProject }}\n    >\n      {children}\n    </SelectedProjectContext.Provider>\n  );\n};\n\nexport const useSelectedProjectValue = () => useContext(SelectedProjectContext);\n","import React, { useState, useContext } from \"react\";\n\ninterface Props {\n  shouldShowMain: boolean;\n  showQuickAddTask: boolean;\n  setShowQuickAddTask: React.Dispatch<React.SetStateAction<boolean>>;\n  setShouldShowMain: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const AddTaskContext = React.createContext<Props>({\n  shouldShowMain: false,\n  showQuickAddTask: false,\n  setShowQuickAddTask: () => false,\n  setShouldShowMain: () => false\n});\n\nexport const AddTaskProvider: React.FC<React.ReactNode> = ({ children }) => {\n  const [shouldShowMain, setShouldShowMain] = useState(false);\n  const [showQuickAddTask, setShowQuickAddTask] = useState(false);\n\n  return (\n    <AddTaskContext.Provider\n      value={{\n        shouldShowMain,\n        showQuickAddTask,\n        setShowQuickAddTask,\n        setShouldShowMain,\n      }}\n    >\n      {children}\n    </AddTaskContext.Provider>\n  );\n};\n\nexport const useAddTaskValue = () => useContext(AddTaskContext);\n","import React from \"react\";\nimport { useProjectsValue } from '../context/projectContext'\n\ninterface Props {\n  setProject: React.Dispatch<React.SetStateAction<string>>;\n  showProjectOverlay: boolean;\n  setShowProjectOverlay: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const ProjectOverlay: React.FC<Props> = ({\n  setProject,\n  showProjectOverlay,\n  setShowProjectOverlay,\n}) => {\n  const { projects } = useProjectsValue()\n\n  return (\n    <>\n      {projects && showProjectOverlay && (\n        <div className=\"project-overlay\" data-testid=\"project-overlay\">\n          <ul className=\"project-overlay__list\">\n            {projects.map((project) => (\n              <li key={project.projectId}>\n                <div\n                  data-testid=\"project-overlay-action\"\n                  onClick={() => {\n                    setProject(project.projectId);\n                    setShowProjectOverlay(false);\n                  }}\n                  onKeyDown={() => {\n                    setProject(project.projectId);\n                    setShowProjectOverlay(false);\n                  }}\n                  tabIndex={0}\n                  role=\"button\"\n                  aria-label=\"Select the task project\"\n                >\n                  {project.name}\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default ProjectOverlay;\n","import moment from \"moment\";\nimport React from \"react\";\nimport { FaRegPaperPlane, FaSpaceShuttle, FaSun } from \"react-icons/fa\";\n\ninterface Props {\n  showTaskDate: boolean;\n  setTaskDate: React.Dispatch<React.SetStateAction<string>>;\n  setShowTaskDate: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const TaskDate: React.FC<Props> = ({\n  showTaskDate,\n  setShowTaskDate,\n  setTaskDate,\n}) => {\n  return (\n    <>\n      {showTaskDate && (\n        <div className=\"task-date\" data-testid=\"task-date-overlay\">\n          <ul className=\"task-date__list\">\n            <li>\n              <div\n                data-testid=\"task-date-today\"\n                tabIndex={0}\n                role=\"button\"\n                aria-label=\"Select today as the task date\"\n                onClick={() => {\n                  setShowTaskDate(false);\n                  setTaskDate(moment().format(\"DD/MM/YYYY\"));\n                }}\n                onKeyDown={() => {\n                  setShowTaskDate(false);\n                  setTaskDate(moment().format(\"DD/MM/YYYY\"));\n                }}\n              >\n                <span>\n                  <FaSpaceShuttle />\n                </span>\n                <span>Today</span>\n              </div>\n            </li>\n\n            <li>\n              <div\n                data-testid=\"task-date-tomorrow\"\n                tabIndex={0}\n                role=\"button\"\n                aria-label=\"Select tomorrow as the task date\"\n                onClick={() => {\n                  setShowTaskDate(false);\n                  setTaskDate(moment().add(1, \"day\").format(\"DD/MM/YYYY\"));\n                }}\n                onKeyDown={() => {\n                  setShowTaskDate(false);\n                  setTaskDate(moment().add(1, \"day\").format(\"DD/MM/YYYY\"));\n                }}\n              >\n                <span>\n                  <FaSun />\n                </span>\n                <span>Tomorrow</span>\n              </div>\n            </li>\n\n            <li>\n              <div\n                data-testid=\"task-date-next-week\"\n                tabIndex={0}\n                role=\"button\"\n                aria-label=\"Select next week as the task date\"\n                onClick={() => {\n                  setShowTaskDate(false);\n                  setTaskDate(moment().add(7, \"days\").format(\"DD/MM/YYYY\"));\n                }}\n                onKeyDown={() => {\n                  setShowTaskDate(false);\n                  setTaskDate(moment().add(7, \"days\").format(\"DD/MM/YYYY\"));\n                }}\n              >\n                <span>\n                  <FaRegPaperPlane />\n                </span>\n                <span>Next week</span>\n              </div>\n            </li>\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default TaskDate;\n","import React, { useState } from \"react\";\nimport { FaRegListAlt, FaRegCalendarAlt, FaTimes } from \"react-icons/fa\";\nimport moment from \"moment\";\nimport { firebase } from \"../firebase\";\nimport { useSelectedProjectValue } from \"../context\";\nimport ProjectOverlay from \"./ProjectOverlay\";\nimport TaskDate from \"./TaskDate\";\n\ninterface Props {\n  showQuickAddTask: boolean;\n  setShowQuickAddTask: React.Dispatch<React.SetStateAction<boolean>>;\n  showAddTaskMain: boolean;\n  shouldShowMain: boolean;\n}\n\nexport const AddTask: React.FC<Props> = ({\n  showAddTaskMain,\n  shouldShowMain,\n  showQuickAddTask,\n  setShowQuickAddTask,\n}) => {\n  const [task, setTask] = useState(\"\");\n  const [taskDate, setTaskDate] = useState(\"\");\n  const [project, setProject] = useState(\"\");\n  const [showMain, setShowMain] = useState(shouldShowMain);\n  const [showProjectOverlay, setShowProjectOverlay] = useState(false);\n  const [showTaskDate, setShowTaskDate] = useState(false);\n\n  const { selectedProject } = useSelectedProjectValue() || {};\n\n  const addTask = async () => {\n    const projectId = project || selectedProject;\n    let collatedDate = \"\";\n\n    if (projectId === \"TODAY\") {\n      collatedDate = moment().format(\"DD/MM/YYYY\");\n    } else if (projectId === \"NEXT_7\") {\n      collatedDate = moment().add(7, \"days\").format(\"DD/MM/YYYY\");\n    }\n\n    return (\n      task &&\n      projectId &&\n      await firebase\n        .firestore()\n        .collection(\"tasks\")\n        .add({\n          archived: false,\n          projectId,\n          task,\n          date: collatedDate || taskDate,\n          userId: \"tarrak123\",\n        })\n        .then(() => {\n          setTask(\"\");\n          setProject(\"\");\n          setShowMain(false);\n          setShowProjectOverlay(false);\n        })\n    );\n  };\n\n  return (\n    <div\n      className={showQuickAddTask ? \"add-task add-task__overlay\" : \"add-task\"}\n      data-testid=\"add-task-comp\"\n    >\n      {showAddTaskMain && (\n        <div\n          aria-label=\"Add task\"\n          className=\"add-task__shallow\"\n          data-testid=\"show-main-action\"\n          onClick={() => setShowMain(!showMain)}\n          onKeyDown={() => setShowMain(!showMain)}\n          tabIndex={0}\n          role=\"button\"\n        >\n          <span className=\"add-task__plus\">+</span>\n          <span className=\"add-task__text\">Add Task</span>\n        </div>\n      )}\n\n      {(showMain || showQuickAddTask) && (\n        <div className=\"add-task__main\" data-testid=\"add-task-main\">\n          {showQuickAddTask && (\n            <>\n              <div data-testid=\"quick-add-task\">\n                <h2 className=\"header\">Quick Add Task</h2>\n                <span\n                  aria-label=\"Cancel adding task\"\n                  className=\"add-task__cancel-x\"\n                  data-testid=\"add-task-quick-cancel\"\n                  onClick={() => {\n                    setShowMain(false);\n                    setShowProjectOverlay(false);\n                    setShowQuickAddTask(false);\n                  }}\n                  onKeyDown={() => {\n                    setShowMain(false);\n                    setShowProjectOverlay(false);\n                    setShowQuickAddTask(false);\n                  }}\n                  tabIndex={0}\n                  role=\"button\"\n                >\n                  <FaTimes fontSize=\"18px\" />\n                </span>\n              </div>\n            </>\n          )}\n          <ProjectOverlay\n            setProject={setProject}\n            showProjectOverlay={showProjectOverlay}\n            setShowProjectOverlay={setShowProjectOverlay}\n          />\n\n          <TaskDate\n            setTaskDate={setTaskDate}\n            showTaskDate={showTaskDate}\n            setShowTaskDate={setShowTaskDate}\n          />\n          <input\n            type=\"text\"\n            aria-label=\"Type in a task\"\n            className=\"add-task__content\"\n            data-testid=\"add-task-content\"\n            value={task}\n            onChange={(e) => setTask(e.target.value)}\n          />\n          <button\n            type=\"button\"\n            className=\"add-task__submit\"\n            data-testid=\"add-task\"\n            onClick={\n              showQuickAddTask\n                ? () => {\n                    addTask();\n                    setShowQuickAddTask(false);\n                  }\n                : () => addTask()\n            }\n            onKeyDown={\n              showQuickAddTask\n                ? () => {\n                    addTask();\n                    setShowQuickAddTask(false);\n                  }\n                : () => addTask()\n            }\n            tabIndex={0}\n          >\n            Add Task\n          </button>\n          {!showQuickAddTask && (\n            <span\n              className=\"add-task__cancel\"\n              data-testid=\"add-task-main-cancel\"\n              onClick={() => {\n                setShowMain(false);\n                setShowProjectOverlay(false);\n              }}\n              onKeyDown={() => {\n                setShowMain(false);\n                setShowProjectOverlay(false);\n              }}\n              tabIndex={0}\n              role=\"button\"\n            >\n              Cancel\n            </span>\n          )}\n          <span\n            className=\"add-task__project\"\n            data-testid=\"show-project-overlay\"\n            onClick={() => setShowProjectOverlay(!showProjectOverlay)}\n            onKeyDown={() => setShowProjectOverlay(!showProjectOverlay)}\n            tabIndex={0}\n            role=\"button\"\n          >\n            <FaRegListAlt />\n          </span>\n          <span\n            className=\"add-task__date\"\n            data-testid=\"show-task-date-overlay\"\n            onClick={() => setShowTaskDate(!showTaskDate)}\n            onKeyDown={() => setShowTaskDate(!showTaskDate)}\n            tabIndex={0}\n            role=\"button\"\n          >\n            <FaRegCalendarAlt />\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddTask;\n","import React from \"react\";\nimport { FaPizzaSlice } from \"react-icons/fa\";\nimport { AddTask } from \"../AddTask\";\nimport { useAddTaskValue } from \"../../context\";\n\ninterface Props {\n  darkMode: boolean;\n  setDarkMode: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const Header: React.FC<Props> = ({ darkMode, setDarkMode }) => {\n  // const [shouldShowMain, setShouldShowMain] = useState(false);\n  // const [showQuickAddTask, setShowQuickAddTask] = useState(false);\n\n  const {\n    shouldShowMain,\n    setShouldShowMain,\n    showQuickAddTask,\n    setShowQuickAddTask,\n  } = useAddTaskValue();\n\n  return (\n    <header className=\"header\" data-testid=\"header\">\n      <nav>\n        <div className=\"logo\">\n          <img src={process.env.PUBLIC_URL + '/images/logo.png'} alt=\"Todoist\" />\n        </div>\n        <div className=\"settings\">\n          <ul>\n            <li className=\"settings__add\">\n              <button\n                data-testid=\"quick-add-task-action\"\n                aria-label=\"Quick add task\"\n                type=\"button\"\n                onClick={() => {\n                  setShowQuickAddTask(true);\n                  setShouldShowMain(true);\n                }}\n                onKeyDown={() => {\n                  setShowQuickAddTask(true);\n                  setShouldShowMain(true);\n                }}\n              >\n                +\n              </button>\n            </li>\n            <li className=\"settings__darkmode\">\n              <button\n                data-testid=\"dark-mode-action\"\n                aria-label=\"Darkmode on/off\"\n                type=\"button\"\n                onClick={() => setDarkMode(!darkMode)}\n                onKeyDown={() => setDarkMode(!darkMode)}\n              >\n                <FaPizzaSlice />\n              </button>\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n      <AddTask\n        showAddTaskMain={false}\n        shouldShowMain={shouldShowMain}\n        showQuickAddTask={showQuickAddTask}\n        setShowQuickAddTask={setShowQuickAddTask}\n      />\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport { FaTrashAlt } from \"react-icons/fa\";\nimport { useProjectsValue, useSelectedProjectValue } from \"../context\";\nimport { firebase } from \"../firebase\";\nimport { Project } from \"../types\";\n\ninterface Props {\n  project: Project;\n}\n\nexport const IndividualProject: React.FC<Props> = ({ project }) => {\n  const [showConfirm, setShowConfirm] = useState(false);\n  const { projects, setProjects } = useProjectsValue()|| {};\n  const { setSelectedProject } = useSelectedProjectValue() || {};\n\n  const deleteProject = async (docId: string) => {\n    await firebase\n      .firestore()\n      .collection(\"projects\")\n      .doc(docId)\n      .delete()\n      .then(() => {\n        setProjects([...projects]);\n        setSelectedProject(\"INBOX\");\n      });\n  };\n\n  return (\n    <>\n      <span className=\"sidebar__dot\">•</span>\n      <span className=\"sidebar__project-name\">{project.name}</span>\n      <span\n        aria-label=\"Confirm delete project\"\n        className=\"sidebar__project-delete\"\n        data-testid=\"delete-project\"\n        onClick={() => setShowConfirm(!showConfirm)}\n        onKeyDown={() => setShowConfirm(!showConfirm)}\n        tabIndex={0}\n        role=\"button\"\n      >\n        <FaTrashAlt />\n        {showConfirm && (\n          <div className=\"project-delete-modal\">\n            <div className=\"project-delete-modal__inner\">\n              <p>Are you sure want to delete this project?</p>\n              <button\n                type=\"button\"\n                onClick={() => deleteProject(project.docId)}\n              >\n                Delete\n              </button>\n              <span\n                aria-label=\"Cancel adding project\"\n                onClick={() => setShowConfirm(!showConfirm)}\n                onKeyDown={() => setShowConfirm(!showConfirm)}\n                tabIndex={0}\n                role=\"button\"\n              >\n                Cancel\n              </span>\n            </div>\n          </div>\n        )}\n      </span>\n    </>\n  );\n};\n\nexport default IndividualProject;\n","import React, { useState } from \"react\";\nimport { useProjectsValue, useSelectedProjectValue } from \"../context\";\nimport IndividualProject from \"./IndividualProject\";\n\ninterface Props {\n  activeValue: string | null\n}\n\n\nexport const Projects: React.FC<Props> = ({ activeValue }) => {\n  const [active, setActive] = useState<string | null>(activeValue);\n  const { setSelectedProject } = useSelectedProjectValue();\n  const { projects } = useProjectsValue()\n\n\n  return (\n    <>\n      {projects &&\n        projects.map((project) => (\n          <li\n            data-testid=\"project-action-parent\"\n            key={project.projectId}\n            data-doc-id={project.docId}\n            className={\n              active === project.projectId\n              ? \"active sidebar__project\"\n              : \"sidebar__project\"\n            }\n            >\n            <div\n              aria-label={`Select ${project.name} as the task project`}\n              data-testid=\"project-action\"\n              className=\"project-wrapper\"\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => {\n                setActive(project.projectId);\n                setSelectedProject(project.projectId);\n              }}\n              onKeyDown={() => {\n                setActive(project.projectId);\n                setSelectedProject(project.projectId);\n              }}\n            >\n              <IndividualProject project={project} />\n            </div>\n          </li>\n        ))}\n    </>\n  );\n};\n\nexport default Projects;\n","import React, { useState } from \"react\";\nimport { firebase } from \"../firebase\";\nimport { generatePushId } from \"../helpers\";\nimport { useProjectsValue } from \"../context\";\n\ninterface Props {\n  shouldShow: boolean\n}\n\nexport const AddProject: React.FC<Props> = ({ shouldShow }) => {\n  const [show, setShow] = useState(shouldShow)\n  const [projectName, setProjectName] = useState(\"\");\n\n  const projectId = generatePushId();\n  const { projects, setProjects } = useProjectsValue() || {};\n\n  const addProject = async () => {\n    projectName &&\n      await firebase\n        .firestore()\n        .collection(\"projects\")\n        .add({\n          projectId,\n          name: projectName,\n          userId: \"tarrak123\",\n        })\n        .then(() => {\n          setProjects([...projects]);\n          setProjectName(\"\");\n          setShow(false);\n        });\n  };\n\n  return (\n    <div className=\"add-project\" data-testid=\"add-project\">\n      {show && (\n        <div className=\"add-project__input\" data-testid=\"add-project-inner\">\n          <input\n            value={projectName}\n            onChange={(e) => setProjectName(e.target.value)}\n            className=\"add-project__name\"\n            data-testid=\"project-name\"\n            type=\"text\"\n            placeholder=\"Name your project\"\n          />\n          <button\n            className=\"add-project__submit\"\n            type=\"button\"\n            onClick={() => addProject()}\n            data-testid=\"add-project-submit\"\n          >\n            Add Project\n          </button>\n          <span\n            aria-label=\"Cancel adding project\"\n            className=\"add-project__cancel\"\n            data-testid=\"hide-project-overlay\"\n            onClick={() => setShow(false)}\n            onKeyDown={() => setShow(false)}\n          >\n            Cancel\n          </span>\n        </div>\n      )}\n      <span className=\"add-project__plus\">+</span>\n      <span\n        className=\"add-project__text\"\n        data-testid=\"add-project-action\"\n        onClick={() => setShow(!show)}\n        onKeyDown={() => setShow(!show)}\n        role=\"button\"\n        tabIndex={0}\n      >\n        Add Project\n      </span>\n    </div>\n  );\n};\n\nexport default AddProject;\n","import React, { useState } from \"react\";\nimport { useSelectedProjectValue } from \"../../context\";\nimport {\n  FaChevronDown,\n  FaInbox,\n  FaRegCalendarAlt,\n  FaRegCalendar,\n} from \"react-icons/fa\";\nimport { Projects } from \"../Projects\";\nimport AddProject from \"../AddProject\";\n\nexport const Sidebar: React.FC = () => {\n  const { setSelectedProject } = useSelectedProjectValue();\n  const [active, setActive] = useState(\"inbox\");\n  const [showProjects, setShowProjects] = useState(true);\n\n  return (\n    <div className=\"sidebar\" data-testid=\"sidebar\">\n      <ul className=\"sidebar__generic\">\n        <li\n          data-testid=\"inbox\"\n          className={active === \"inbox\" ? \"active\" : undefined}\n        >\n          <div\n            aria-label=\"Show inbox tasks\"\n            data-testid=\"inbox-action\"\n            tabIndex={0}\n            role=\"button\"\n            onClick={() => {\n              setActive(\"inbox\");\n              setSelectedProject(\"INBOX\");\n            }}\n            onKeyDown={() => {\n              setActive(\"inbox\");\n              setSelectedProject(\"INBOX\");\n            }}\n          >\n            <span>\n              <FaInbox />\n            </span>\n            <span>Inbox</span>\n          </div>\n        </li>\n        <li\n          data-testid=\"today\"\n          className={active === \"today\" ? \"active\" : undefined}\n        >\n          <div\n            aria-label=\"Show today's asks\"\n            data-testid=\"today-action\"\n            tabIndex={0}\n            role=\"button\"\n            onClick={() => {\n              setActive(\"today\");\n              setSelectedProject(\"TODAY\");\n            }}\n            onKeyDown={() => {\n              setActive(\"today\");\n              setSelectedProject(\"TODAY\");\n            }}\n          >\n            <span>\n              <FaRegCalendar />\n            </span>\n            <span>Today</span>\n          </div>\n        </li>\n        <li\n          data-testid=\"next_7\"\n          className={active === \"next_7\" ? \"active\" : undefined}\n        >\n          <div\n            aria-label=\"Show tasks for the next 7 days\"\n            data-testid=\"next_7-action\"\n            tabIndex={0}\n            role=\"button\"\n            onClick={() => {\n              setActive(\"next_7\");\n              setSelectedProject(\"NEXT_7\");\n            }}\n            onKeyDown={() => {\n              setActive(\"next_7\");\n              setSelectedProject(\"NEXT_7\");\n            }}\n          >\n            <span>\n              <FaRegCalendarAlt />\n            </span>\n            <span>Next 7 days</span>\n          </div>\n        </li>\n      </ul>\n      <div\n        className=\"sidebar__middle\"\n        aria-label=\"Show/hide projects\"\n        onClick={() => setShowProjects(!showProjects)}\n        onKeyDown={() => setShowProjects(!showProjects)}\n        tabIndex={0}\n        role=\"button\"\n      >\n        <span>\n          <FaChevronDown\n            className={!showProjects ? \"hidden-projects\" : undefined}\n          />\n        </span>\n        <h2>Projects</h2>\n      </div>\n      <ul className=\"sidebar__projects\">\n        {showProjects && <Projects activeValue={active} />}\n      </ul>\n\n      {showProjects && <AddProject shouldShow={false} />}\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport { firebase } from \"../firebase\";\n\ninterface Props{\n  id: string;\n  taskDesc: string;\n}\n\nexport const Checkbox: React.FC<Props> = ({ id, taskDesc }) => {\n  const archivedTask = async () => {\n    await firebase.firestore().collection(\"tasks\").doc(id).update({\n      archived: true,\n    });\n  };\n\n  return (\n    <div\n      className=\"checkbox-holder\"\n      data-testid=\"checkbox-action\"\n      aria-label={`Mark ${taskDesc} as done?`}\n      onClick={() => archivedTask()}\n      onKeyDown={() => archivedTask()}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <span className=\"checkbox\" />\n    </div>\n  );\n};\n\nexport default Checkbox;\n","import React, { useEffect } from \"react\";\nimport Checkbox from \"./Checkbox\";\nimport AddTask from \"./AddTask\";\nimport { useTasks } from \"../hooks\";\nimport { collatedTasks } from \"../constants\";\nimport { getTitle, getCollatedTitle, collatedTasksExist } from \"../helpers\";\nimport {\n  useSelectedProjectValue,\n  useProjectsValue,\n  useAddTaskValue,\n} from \"../context\";\n\nexport const Tasks: React.FC = () => {\n  const { selectedProject } = useSelectedProjectValue();\n  const { projects } = useProjectsValue()\n  const { tasks } = useTasks(selectedProject);\n  const { shouldShowMain, setShowQuickAddTask } = useAddTaskValue();\n\n  let projectName: string | undefined | null;\n\n  if (collatedTasksExist(selectedProject) && selectedProject) {\n    projectName = getCollatedTitle(collatedTasks, selectedProject)?.name;\n  }\n\n  if (\n    projects &&\n    projects.length > 0 &&\n    selectedProject &&\n    !collatedTasksExist(selectedProject)\n  ) {\n    projectName = getTitle(projects, selectedProject)?.name;\n  }\n\n  useEffect(() => {\n    document.title = `${projectName}: Todoist`;\n  }, [projectName]);\n\n  return (\n    <div className=\"tasks\" data-testid=\"tasks\">\n      <h2 data-testid=\"project-name\">{projectName}</h2>\n\n      <ul className=\"tasks__list\">\n        {tasks.map((task) => (\n          <li key={`${task.id}`}>\n            <Checkbox id={task.id} taskDesc={task.task} />\n            <span>{task.task}</span>\n          </li>\n        ))}\n      </ul>\n\n      <AddTask\n        showAddTaskMain={true}\n        shouldShowMain={shouldShowMain}\n        showQuickAddTask={false}\n        setShowQuickAddTask={setShowQuickAddTask}\n      />\n    </div>\n  );\n};\n\nexport default Tasks;\n","import React from 'react'\nimport Sidebar from './Sidebar';\nimport Tasks from '../Tasks';\n\n\ninterface Props {\n\n}\n\nexport const Content: React.FC<Props> = () => {\n    return(\n        <section className=\"content\">\n            <Sidebar />\n            <Tasks />\n        </section>\n    )\n}\n\nexport default Content;","import React, { useState } from \"react\";\nimport Header from \"./components/layout/Header\";\nimport Content from \"./components/layout/Content\";\nimport {\n  ProjectsProvider,\n  SelectedProjectProvider,\n  AddTaskProvider,\n} from \"./context\";\n\ninterface Props {\n  darkModeDefault : boolean\n}\n\nexport const App: React.FC<Props> = ({ darkModeDefault }) => {\n  const [darkMode, setDarkMode] = useState(darkModeDefault);\n\n  return (\n    <SelectedProjectProvider>\n      <ProjectsProvider>\n        <AddTaskProvider>\n          <div className=\"App\">\n            <main\n              data-testid=\"application\"\n              className={darkMode ? \"darkmode\" : undefined}\n            >\n              <Header darkMode={darkMode} setDarkMode={setDarkMode} />\n              <Content />\n            </main>\n          </div>\n        </AddTaskProvider>\n      </ProjectsProvider>\n    </SelectedProjectProvider>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/base.scss'\n\nReactDOM.render(\n    <App darkModeDefault={true} />,\n  document.getElementById('root')\n);\n\nexport {}"],"sourceRoot":""}